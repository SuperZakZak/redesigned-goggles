const fs = require('fs');
const { execSync } = require('child_process');

console.log('üî¨ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î –ö –†–ï–®–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú–´\n');

// –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @walletpass/pass-js –≤–º–µ—Å—Ç–æ passkit-generator
async function testAlternativeLibrary() {
  console.log('1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï @walletpass/pass-js');
  console.log('==================================');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
    try {
      require('@walletpass/pass-js');
      console.log('‚úÖ @walletpass/pass-js —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (e) {
      console.log('‚ö†Ô∏è  @walletpass/pass-js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
      execSync('npm install @walletpass/pass-js', { stdio: 'inherit' });
      console.log('‚úÖ @walletpass/pass-js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    const { PKPass } = require('@walletpass/pass-js');
    
    // –°–æ–∑–¥–∞–µ–º pass —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
    const pass = new PKPass({
      'pass.json': JSON.stringify({
        formatVersion: 1,
        passTypeIdentifier: 'pass.com.loyloy.loyalty',
        teamIdentifier: '7K66482HM2',
        organizationName: 'Loy Digital Loyalty Platform',
        description: 'Test Loyalty Card',
        logoText: 'Loy',
        foregroundColor: 'rgb(255, 255, 255)',
        backgroundColor: 'rgb(60, 65, 76)',
        serialNumber: 'TEST-' + Date.now(),
        storeCard: {
          headerFields: [{
            key: 'loy',
            label: 'LOYALTY',
            value: 'Loy Club'
          }],
          primaryFields: [{
            key: 'balance',
            label: '–ë–∞–ª–∞–Ω—Å',
            value: '1000 ‚ÇΩ'
          }],
          secondaryFields: [{
            key: 'cardNumber',
            label: '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
            value: '1234567890'
          }],
          auxiliaryFields: []
        },
        barcode: {
          message: 'TEST123456',
          format: 'PKBarcodeFormatQR',
          messageEncoding: 'iso-8859-1'
        }
      })
    }, {
      wwdr: fs.readFileSync('./certificates/wwdr-g4.pem'),
      signerCert: fs.readFileSync('./certificates/cert-final.pem'),
      signerKey: fs.readFileSync('./certificates/key-final.pem')
    });
    
    const buffer = pass.getAsBuffer();
    
    if (buffer && buffer.length > 0) {
      const fileName = `alternative-test-${Date.now()}.pkpass`;
      fs.writeFileSync(fileName, buffer);
      console.log(`‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –§–∞–π–ª: ${fileName}`);
      return true;
    }
    
  } catch (error) {
    console.log('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
    return false;
  }
}

// –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å pass –≤—Ä—É—á–Ω—É—é –∏—Å–ø–æ–ª—å–∑—É—è OpenSSL
async function testManualApproach() {
  console.log('\n2. –†–£–ß–ù–û–ï –°–û–ó–î–ê–ù–ò–ï .pkpass –° OPENSSL');
  console.log('====================================');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è pass
    const passDir = './temp-pass';
    if (fs.existsSync(passDir)) {
      execSync(`rm -rf "${passDir}"`);
    }
    fs.mkdirSync(passDir);
    
    // –°–æ–∑–¥–∞–µ–º pass.json
    const passJson = {
      formatVersion: 1,
      passTypeIdentifier: 'pass.com.loyloy.loyalty',
      teamIdentifier: '7K66482HM2',
      organizationName: 'Loy Digital Loyalty Platform',
      description: 'Test Loyalty Card',
      logoText: 'Loy',
      foregroundColor: 'rgb(255, 255, 255)',
      backgroundColor: 'rgb(60, 65, 76)',
      serialNumber: 'MANUAL-' + Date.now(),
      storeCard: {
        headerFields: [{
          key: 'loy',
          label: 'LOYALTY',
          value: 'Loy Club'
        }],
        primaryFields: [{
          key: 'balance',
          label: '–ë–∞–ª–∞–Ω—Å',
          value: '1000 ‚ÇΩ'
        }],
        secondaryFields: [{
          key: 'cardNumber',
          label: '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
          value: '1234567890'
        }],
        auxiliaryFields: []
      },
      barcode: {
        message: 'MANUAL123456',
        format: 'PKBarcodeFormatQR',
        messageEncoding: 'iso-8859-1'
      }
    };
    
    fs.writeFileSync(`${passDir}/pass.json`, JSON.stringify(passJson, null, 2));
    console.log('‚úÖ pass.json —Å–æ–∑–¥–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º manifest.json
    const passJsonContent = fs.readFileSync(`${passDir}/pass.json`);
    const passJsonHash = require('crypto').createHash('sha1').update(passJsonContent).digest('hex');
    
    const manifest = {
      'pass.json': passJsonHash
    };
    
    fs.writeFileSync(`${passDir}/manifest.json`, JSON.stringify(manifest, null, 2));
    console.log('‚úÖ manifest.json —Å–æ–∑–¥–∞–Ω');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º manifest
    const signCommand = `openssl smime -binary -sign -certfile "./certificates/wwdr-g4.pem" -signer "./certificates/cert-final.pem" -inkey "./certificates/key-final.pem" -in "${passDir}/manifest.json" -out "${passDir}/signature" -outform DER`;
    
    execSync(signCommand);
    console.log('‚úÖ signature —Å–æ–∑–¥–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º zip –∞—Ä—Ö–∏–≤
    const zipCommand = `cd "${passDir}" && zip -r "../manual-test-${Date.now()}.pkpass" .`;
    execSync(zipCommand);
    console.log('‚úÖ .pkpass –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω');
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    execSync(`rm -rf "${passDir}"`);
    
    return true;
    
  } catch (error) {
    console.log('‚ùå –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
    return false;
  }
}

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å node-forge
async function diagnoseNodeForge() {
  console.log('\n3. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê NODE-FORGE');
  console.log('==========================');
  
  try {
    const forge = require('node-forge');
    
    // –ß–∏—Ç–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –ø–∞—Ä—Å–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    const certPem = fs.readFileSync('./certificates/cert-final.pem', 'utf8');
    console.log('–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:');
    console.log(certPem.substring(0, 100));
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å —á–µ—Ä–µ–∑ node-forge
    const cert = forge.pki.certificateFromPem(certPem);
    console.log('‚úÖ node-forge —É—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å–∏—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
    console.log(`Subject: ${cert.subject.getField('CN').value}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
    const keyPem = fs.readFileSync('./certificates/key-final.pem', 'utf8');
    const privateKey = forge.pki.privateKeyFromPem(keyPem);
    console.log('‚úÖ node-forge —É—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å–∏—Ç –∫–ª—é—á');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º WWDR
    const wwdrPem = fs.readFileSync('./certificates/wwdr-g4.pem', 'utf8');
    const wwdrCert = forge.pki.certificateFromPem(wwdrPem);
    console.log('‚úÖ node-forge —É—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å–∏—Ç WWDR');
    console.log(`WWDR Subject: ${wwdrCert.subject.getField('CN').value}`);
    
    return true;
    
  } catch (error) {
    console.log('‚ùå node-forge –Ω–µ –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:', error.message);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
    if (error.message.includes('Invalid PEM')) {
      console.log('\nüîç –ê–Ω–∞–ª–∏–∑ PEM —Ñ–æ—Ä–º–∞—Ç–∞:');
      const files = ['./certificates/cert-final.pem', './certificates/key-final.pem', './certificates/wwdr-g4.pem'];
      
      files.forEach(file => {
        const content = fs.readFileSync(file, 'utf8');
        console.log(`\n${file}:`);
        console.log(`- –î–ª–∏–Ω–∞: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${content.substring(0, 30)}`);
        console.log(`- –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞: ${content.substring(content.length - 30)}`);
        console.log(`- –°–æ–¥–µ—Ä–∂–∏—Ç \\r: ${content.includes('\r')}`);
        console.log(`- –°–æ–¥–µ—Ä–∂–∏—Ç \\n: ${content.includes('\n')}`);
      });
    }
    
    return false;
  }
}

async function main() {
  console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏...\n');
  
  // 1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ node-forge
  const forgeWorks = await diagnoseNodeForge();
  
  // 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
  const alternativeWorks = await testAlternativeLibrary();
  
  // 3. –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
  const manualWorks = await testManualApproach();
  
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´');
  console.log('======================');
  console.log(`node-forge –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ${forgeWorks ? '‚úÖ' : '‚ùå'}`);
  console.log(`@walletpass/pass-js: ${alternativeWorks ? '‚úÖ' : '‚ùå'}`);
  console.log(`–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: ${manualWorks ? '‚úÖ' : '‚ùå'}`);
  
  if (alternativeWorks || manualWorks) {
    console.log('\nüéâ –ù–ê–ô–î–ï–ù–û –†–ê–ë–û–ß–ï–ï –†–ï–®–ï–ù–ò–ï!');
    if (alternativeWorks) {
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @walletpass/pass-js –≤–º–µ—Å—Ç–æ passkit-generator');
    }
    if (manualWorks) {
      console.log('‚úÖ –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ .pkpass —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
  } else {
    console.log('\n‚ùå –í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ Apple Developer Portal');
  }
}

main().catch(console.error);
