const fs = require('fs');
const { execSync } = require('child_process');

console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í APPLE WALLET\n');

const config = {
  p12File: './certificates/Certificates.p12',
  password: 'paPlr8seGgpB',
  wwdrFile: './certificates/wwdr-g4.pem'
};

function regeneratePEMFiles() {
  console.log('1. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ß–ò–°–¢–´–• PEM –§–ê–ô–õ–û–í –ò–ó P12');
  console.log('=======================================');
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    console.log('–ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç...');
    const certCommand = `openssl pkcs12 -in "${config.p12File}" -clcerts -nokeys -out "./certificates/cert-new.pem" -passin pass:${config.password}`;
    execSync(certCommand);
    console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω: cert-new.pem');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    console.log('–ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á...');
    const keyCommand = `openssl pkcs12 -in "${config.p12File}" -nocerts -nodes -out "./certificates/key-new.pem" -passin pass:${config.password}`;
    execSync(keyCommand);
    console.log('‚úÖ –ö–ª—é—á –∏–∑–≤–ª–µ—á–µ–Ω: key-new.pem');
    
    // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –æ—Ç Bag Attributes
    console.log('\n2. –û–ß–ò–°–¢–ö–ê –û–¢ BAG ATTRIBUTES');
    console.log('=============================');
    
    cleanPEMFile('./certificates/cert-new.pem', './certificates/cert-final.pem', 'CERTIFICATE');
    cleanPEMFile('./certificates/key-new.pem', './certificates/key-final.pem', 'PRIVATE KEY');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n3. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê');
    console.log('======================');
    
    validatePEMFile('./certificates/cert-final.pem', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
    validatePEMFile('./certificates/key-final.pem', '–∫–ª—é—á');
    validatePEMFile('./certificates/wwdr-g4.pem', 'WWDR');
    
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏:', error.message);
    return false;
  }
}

function cleanPEMFile(inputFile, outputFile, type) {
  console.log(`–û—á–∏—â–∞–µ–º ${inputFile}...`);
  
  const content = fs.readFileSync(inputFile, 'utf8');
  
  // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü PEM –±–ª–æ–∫–∞
  const startMarker = `-----BEGIN ${type}-----`;
  const endMarker = `-----END ${type}-----`;
  
  const startIndex = content.indexOf(startMarker);
  const endIndex = content.indexOf(endMarker) + endMarker.length;
  
  if (startIndex === -1 || endIndex === -1) {
    console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω PEM –±–ª–æ–∫ ${type} –≤ ${inputFile}`);
    return false;
  }
  
  const cleanContent = content.substring(startIndex, endIndex) + '\n';
  fs.writeFileSync(outputFile, cleanContent);
  console.log(`‚úÖ –û—á–∏—â–µ–Ω: ${outputFile}`);
  
  return true;
}

function validatePEMFile(filePath, type) {
  try {
    let command;
    if (filePath.includes('key')) {
      command = `openssl rsa -in "${filePath}" -check -noout`;
    } else {
      command = `openssl x509 -in "${filePath}" -text -noout`;
    }
    
    execSync(command, { stdio: 'pipe' });
    console.log(`‚úÖ ${type} –≤–∞–ª–∏–¥–µ–Ω: ${filePath}`);
    return true;
  } catch (error) {
    console.log(`‚ùå ${type} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: ${filePath} - ${error.message}`);
    return false;
  }
}

function fixLineEndings() {
  console.log('\n4. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ö–û–ù–ß–ê–ù–ò–ô –°–¢–†–û–ö');
  console.log('==============================');
  
  const files = [
    './certificates/cert-final.pem',
    './certificates/key-final.pem',
    './certificates/wwdr-g4.pem'
  ];
  
  files.forEach(file => {
    if (fs.existsSync(file)) {
      try {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
        let content = fs.readFileSync(file, 'utf8');
        content = content.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∞–π–ª –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏
        if (!content.endsWith('\n')) {
          content += '\n';
        }
        
        fs.writeFileSync(file, content);
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–∫: ${file}`);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${file}: ${error.message}`);
      }
    }
  });
}

async function main() {
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  if (!fs.existsSync(config.p12File)) {
    console.log(`‚ùå P12 —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${config.p12File}`);
    return;
  }
  
  if (!fs.existsSync(config.wwdrFile)) {
    console.log(`‚ùå WWDR —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${config.wwdrFile}`);
    return;
  }
  
  console.log('‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã\n');
  
  // –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º PEM —Ñ–∞–π–ª—ã
  const success = regeneratePEMFiles();
  
  if (success) {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
    fixLineEndings();
    
    console.log('\nüéâ –°–ï–†–¢–ò–§–ò–ö–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!');
    console.log('==========================');
    console.log('–ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã:');
    console.log('- certificates/cert-final.pem (—á–∏—Å—Ç—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)');
    console.log('- certificates/key-final.pem (—á–∏—Å—Ç—ã–π –∫–ª—é—á)');
    console.log('- certificates/wwdr-g4.pem (WWDR —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)');
    console.log('\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node test-fixed-certificates.js');
  } else {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã');
    console.log('–í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ Apple Developer Portal');
  }
}

main().catch(console.error);
