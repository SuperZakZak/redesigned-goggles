const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í APPLE WALLET\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ wallet.ts
const config = {
  appleCertPath: './certificates/Certificates.p12',
  appleCertPassword: 'paPlr8seGgpB',
  appleWwdrPath: './certificates/wwdr-g4.pem', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å pass(2).cer
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ PEM —Ñ–∞–π–ª—ã
  certPemPath: './certificates/cert-clean.pem',
  keyPemPath: './certificates/key-pkcs8.pem'
};

function checkFileExists(filePath) {
  const exists = fs.existsSync(filePath);
  const status = exists ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${filePath} - ${exists ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
  
  if (exists) {
    const stats = fs.statSync(filePath);
    console.log(`   –†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`);
  }
  
  return exists;
}

function validateCertificate(certPath, type) {
  console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ ${type}: ${certPath}`);
  
  if (!checkFileExists(certPath)) {
    return false;
  }
  
  try {
    let command;
    
    if (certPath.endsWith('.p12')) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ P12 —Ñ–∞–π–ª–∞
      command = `openssl pkcs12 -info -in "${certPath}" -passin pass:${config.appleCertPassword} -noout`;
    } else if (certPath.includes('key')) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
      command = `openssl rsa -in "${certPath}" -check -noout`;
    } else {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ X.509 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      command = `openssl x509 -in "${certPath}" -text -noout`;
    }
    
    const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (certPath.endsWith('.p12')) {
      console.log('   P12 —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á');
    } else if (output.includes('Subject:')) {
      const subjectMatch = output.match(/Subject: (.+)/);
      if (subjectMatch) {
        console.log(`   Subject: ${subjectMatch[1].trim()}`);
      }
      
      const validityMatch = output.match(/Not After : (.+)/);
      if (validityMatch) {
        console.log(`   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${validityMatch[1].trim()}`);
      }
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

function testPEMFormat(filePath) {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PEM —Ñ–æ—Ä–º–∞—Ç–∞: ${filePath}`);
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º PEM –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const pemPatterns = [
    { start: '-----BEGIN CERTIFICATE-----', end: '-----END CERTIFICATE-----' },
    { start: '-----BEGIN PRIVATE KEY-----', end: '-----END PRIVATE KEY-----' },
    { start: '-----BEGIN RSA PRIVATE KEY-----', end: '-----END RSA PRIVATE KEY-----' }
  ];
  
  let validPem = false;
  
  for (const pattern of pemPatterns) {
    if (content.includes(pattern.start) && content.includes(pattern.end)) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π PEM –±–ª–æ–∫: ${pattern.start}`);
      validPem = true;
    }
  }
  
  if (!validPem) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö PEM –±–ª–æ–∫–æ–≤');
    console.log('–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–∞–π–ª–∞:');
    console.log(content.substring(0, 200));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Bag Attributes
  if (content.includes('Bag Attributes')) {
    console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã Bag Attributes - –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
  }
  
  return validPem;
}

async function main() {
  console.log('1. –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í');
  console.log('================================');
  
  const files = [
    config.appleCertPath,
    config.appleWwdrPath,
    config.certPemPath,
    config.keyPemPath
  ];
  
  files.forEach(file => checkFileExists(file));
  
  console.log('\n2. –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í');
  console.log('=========================');
  
  const p12Valid = validateCertificate(config.appleCertPath, 'P12 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
  const wwdrValid = validateCertificate(config.appleWwdrPath, 'WWDR —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
  const certPemValid = validateCertificate(config.certPemPath, 'PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
  const keyPemValid = validateCertificate(config.keyPemPath, 'PEM –∫–ª—é—á');
  
  console.log('\n3. –ü–†–û–í–ï–†–ö–ê PEM –§–û–†–ú–ê–¢–ê');
  console.log('=======================');
  
  testPEMFormat(config.appleWwdrPath);
  testPEMFormat(config.certPemPath);
  testPEMFormat(config.keyPemPath);
  
  console.log('\n4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
  console.log('===============');
  
  if (!p12Valid) {
    console.log('‚ùå P12 —Ñ–∞–π–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
  }
  
  if (!wwdrValid) {
    console.log('‚ùå WWDR —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - —Å–∫–∞—á–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å Apple Developer Portal');
  }
  
  if (p12Valid && wwdrValid) {
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã');
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ PEM —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ P12');
  }
  
  if (certPemValid && keyPemValid && wwdrValid) {
    console.log('‚úÖ –í—Å–µ PEM —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
  }
  
  console.log('\n5. –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò');
  console.log('==================');
  console.log('1. –ï—Å–ª–∏ P12 –≤–∞–ª–∏–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å passkit-generator');
  console.log('2. –ï—Å–ª–∏ PEM —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç —Å PEM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
  console.log('3. –ï—Å–ª–∏ –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ - –ø–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ Apple Developer Portal');
}

main().catch(console.error);
