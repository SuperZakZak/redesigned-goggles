const { PKPass } = require('passkit-generator');
const path = require('path');
const fs = require('fs');

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–õ–ò–ß–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í\n');

// –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const configs = [
  {
    name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: P12 + WWDR (—Ç–µ–∫—É—â–∞—è)',
    certificates: {
      wwdr: './certificates/wwdr-g4.pem',
      signerCert: './certificates/Certificates.p12',
      signerKey: './certificates/Certificates.p12',
      signerKeyPassphrase: 'paPlr8seGgpB',
    }
  },
  {
    name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: –û—Ç–¥–µ–ª—å–Ω—ã–µ PEM —Ñ–∞–π–ª—ã',
    certificates: {
      wwdr: './certificates/wwdr-g4.pem',
      signerCert: './certificates/cert-clean.pem',
      signerKey: './certificates/key-pkcs8.pem',
    }
  },
  {
    name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π WWDR',
    certificates: {
      wwdr: './certificates/wwdr.pem',
      signerCert: './certificates/Certificates.p12',
      signerKey: './certificates/Certificates.p12',
      signerKeyPassphrase: 'paPlr8seGgpB',
    }
  },
  {
    name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 4: Plain key –≤–º–µ—Å—Ç–æ PKCS8',
    certificates: {
      wwdr: './certificates/wwdr-g4.pem',
      signerCert: './certificates/cert-clean.pem',
      signerKey: './certificates/key-plain.pem',
    }
  }
];

async function testConfiguration(config) {
  console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${config.name}`);
  console.log('='.repeat(config.name.length + 15));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  const missingFiles = [];
  for (const [key, filePath] of Object.entries(config.certificates)) {
    if (key !== 'signerKeyPassphrase' && !fs.existsSync(filePath)) {
      missingFiles.push(`${key}: ${filePath}`);
    }
  }
  
  if (missingFiles.length > 0) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:');
    missingFiles.forEach(file => console.log(`   ${file}`));
    return false;
  }
  
  console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã');
  
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å PKPass —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const pass = await PKPass.from({
      model: path.resolve('templates', 'apple', 'loy.pass'),
      certificates: config.certificates,
    });
    
    console.log('‚úÖ PKPass –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    pass.serialNumber = 'TEST-' + Date.now();
    pass.setBarcodes({
      message: 'TEST123',
      format: 'PKBarcodeFormatQR',
      messageEncoding: 'iso-8859-1'
    });
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å .pkpass —Ñ–∞–π–ª
    const buffer = pass.getAsBuffer();
    
    if (buffer && buffer.length > 0) {
      console.log(`‚úÖ .pkpass —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (${buffer.length} –±–∞–π—Ç)`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const testFileName = `test-${Date.now()}.pkpass`;
      fs.writeFileSync(testFileName, buffer);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: ${testFileName}`);
      
      return true;
    } else {
      console.log('‚ùå –ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error.message.includes('Invalid PEM')) {
      console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º PEM - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–æ–≤');
    } else if (error.message.includes('PKCS12')) {
      console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å P12 —Ñ–∞–π–ª–æ–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å');
    } else if (error.message.includes('certificate')) {
      console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è');
    }
    
    return false;
  }
}

async function main() {
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω pass...');
  const templatePath = path.resolve('templates', 'apple', 'loy.pass');
  if (!fs.existsSync(templatePath)) {
    console.log(`‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${templatePath}`);
    console.log('–°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞
    const templateDir = path.dirname(templatePath);
    if (!fs.existsSync(templateDir)) {
      fs.mkdirSync(templateDir, { recursive: true });
    }
    
    const passJson = {
      formatVersion: 1,
      passTypeIdentifier: process.env.APPLE_WALLET_PASS_TYPE_ID || 'pass.com.loy.loyalty',
      teamIdentifier: process.env.APPLE_WALLET_TEAM_ID || 'YOUR_TEAM_ID',
      organizationName: 'Loy Digital Loyalty Platform',
      description: 'Test Loyalty Card',
      logoText: 'Loy',
      foregroundColor: 'rgb(255, 255, 255)',
      backgroundColor: 'rgb(60, 65, 76)',
      storeCard: {
        headerFields: [],
        primaryFields: [],
        secondaryFields: [],
        auxiliaryFields: []
      }
    };
    
    fs.writeFileSync(path.join(templatePath, 'pass.json'), JSON.stringify(passJson, null, 2));
    console.log('‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω');
  } else {
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω');
  }
  
  let successCount = 0;
  
  for (const config of configs) {
    const success = await testConfiguration(config);
    if (success) {
      successCount++;
      console.log(`\nüéâ –£–°–ü–ï–•! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "${config.name}" —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
    }
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('===========================');
  console.log(`–£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${successCount}/${configs.length}`);
  
  if (successCount === 0) {
    console.log('\n‚ùå –ù–ò –û–î–ù–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    console.log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ diagnose-certificates.js');
    console.log('2. –ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ Apple Developer Portal');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π');
  } else {
    console.log('\n‚úÖ –ù–ê–ô–î–ï–ù–ê –†–ê–ë–û–ß–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø');
    console.log('–û–±–Ω–æ–≤–∏—Ç–µ src/config/wallet.ts —Å —Ä–∞–±–æ—á–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
  }
}

main().catch(console.error);
