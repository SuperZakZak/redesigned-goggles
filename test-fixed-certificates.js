const { PKPass } = require('passkit-generator');
const path = require('path');
const fs = require('fs');

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
const fixedConfig = {
  name: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ PEM —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
  certificates: {
    wwdr: './certificates/wwdr-g4.pem',
    signerCert: './certificates/cert-final.pem',
    signerKey: './certificates/key-final.pem',
  }
};

async function testFixedConfiguration() {
  console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${fixedConfig.name}`);
  console.log('='.repeat(fixedConfig.name.length + 15));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  const missingFiles = [];
  for (const [key, filePath] of Object.entries(fixedConfig.certificates)) {
    if (!fs.existsSync(filePath)) {
      missingFiles.push(`${key}: ${filePath}`);
    }
  }
  
  if (missingFiles.length > 0) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:');
    missingFiles.forEach(file => console.log(`   ${file}`));
    return false;
  }
  
  console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
  for (const [key, filePath] of Object.entries(fixedConfig.certificates)) {
    const stats = fs.statSync(filePath);
    console.log(`   ${key}: ${stats.size} –±–∞–π—Ç`);
  }
  
  try {
    console.log('\nüîÑ –°–æ–∑–¥–∞–µ–º PKPass –æ–±—ä–µ–∫—Ç...');
    const pass = await PKPass.from({
      model: path.resolve('templates', 'apple', 'loy.pass'),
      certificates: fixedConfig.certificates,
    });
    
    console.log('‚úÖ PKPass –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    
    console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã...');
    const serialNumber = 'TEST-' + Date.now();
    pass.serialNumber = serialNumber;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥
    pass.setBarcodes({
      message: 'TEST123456',
      format: 'PKBarcodeFormatQR',
      messageEncoding: 'iso-8859-1'
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∫–∞—Ä—Ç—ã
    pass.headerFields.push({
      key: 'loy',
      label: 'LOYALTY',
      value: 'Loy Club'
    });
    
    pass.primaryFields.push({
      key: 'balance',
      label: '–ë–∞–ª–∞–Ω—Å',
      value: '1000 ‚ÇΩ',
      currencyCode: 'RUB'
    });
    
    pass.secondaryFields.push({
      key: 'cardNumber',
      label: '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
      value: '1234567890'
    });
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .pkpass —Ñ–∞–π–ª...');
    const buffer = pass.getAsBuffer();
    
    if (buffer && buffer.length > 0) {
      console.log(`‚úÖ .pkpass —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (${buffer.length} –±–∞–π—Ç)`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const fileName = `loy-test-${Date.now()}.pkpass`;
      fs.writeFileSync(fileName, buffer);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: ${fileName}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ zip-–∞—Ä—Ö–∏–≤
      const fileType = require('child_process').execSync(`file "${fileName}"`, { encoding: 'utf8' });
      console.log(`üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞: ${fileType.trim()}`);
      
      if (fileType.includes('Zip archive')) {
        console.log('‚úÖ –§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º Zip-–∞—Ä—Ö–∏–≤–æ–º (.pkpass)');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
        try {
          const zipContents = require('child_process').execSync(`unzip -l "${fileName}"`, { encoding: 'utf8' });
          console.log('\nüì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .pkpass –∞—Ä—Ö–∏–≤–∞:');
          console.log(zipContents);
        } catch (e) {
          console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞');
        }
        
        return true;
      } else {
        console.log('‚ùå –§–∞–π–ª –ù–ï —è–≤–ª—è–µ—Ç—Å—è Zip-–∞—Ä—Ö–∏–≤–æ–º');
        return false;
      }
      
    } else {
      console.log('‚ùå –ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.log('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (error.message.includes('Invalid PEM')) {
      console.log('\nüí° –í—Å–µ –µ—â–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å PEM —Ñ–æ—Ä–º–∞—Ç–æ–º');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–∏ passkit-generator');
      console.log('2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π —Ñ–∞–π–ª–æ–≤');
      console.log('3. –ù—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã');
    }
    
    return false;
  }
}

async function main() {
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω pass...');
  const templatePath = path.resolve('templates', 'apple', 'loy.pass');
  if (!fs.existsSync(templatePath)) {
    console.log(`‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${templatePath}`);
    return;
  }
  
  console.log('‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω\n');
  
  const success = await testFixedConfiguration();
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('=========================');
  
  if (success) {
    console.log('üéâ –£–°–ü–ï–•! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!');
    console.log('\n‚úÖ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ src/config/wallet.ts —Å –Ω–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º');
    console.log('2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API endpoint');
    console.log('\n–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è wallet.ts:');
    console.log('```typescript');
    console.log('appleCertPath: path.resolve("certificates", "cert-final.pem"),');
    console.log('appleKeyPath: path.resolve("certificates", "key-final.pem"),');
    console.log('appleWwdrPath: path.resolve("certificates", "wwdr-g4.pem"),');
    console.log('// –£–±—Ä–∞—Ç—å appleCertPassword - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω');
    console.log('```');
  } else {
    console.log('‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('\nüîç –î–ê–õ–¨–ù–ï–ô–®–ò–ï –î–ï–ô–°–¢–í–ò–Ø:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é passkit-generator');
    console.log('2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É');
    console.log('3. –ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —á–µ—Ä–µ–∑ Apple Developer Portal');
  }
}

main().catch(console.error);
