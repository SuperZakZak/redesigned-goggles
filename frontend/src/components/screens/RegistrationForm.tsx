import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { NavigationHeader } from '@/components/ui/NavigationHeader'
import { formatPhoneNumber } from '@/lib/utils'
import type { RegistrationFormData } from '@/types'

const registrationSchema = z.object({
  name: z.string().min(1, '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
    .min(3, '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
    .regex(/^[–∞-—è—ëa-z\s\-]+$/i, '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã'),
  phone: z.string().min(1, '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
    .refine((phone) => {
      console.log('üîç Phone validation - input:', phone, 'length:', phone.length)
      const digits = phone.replace(/\D/g, '')
      console.log('üîç Phone validation - digits:', digits, 'length:', digits.length)
      const isValid = digits.length === 11 && digits.startsWith('7')
      console.log('üîç Phone validation - result:', isValid)
      return isValid
    }, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7 999 999-99-99)'),
})

interface RegistrationFormProps {
  onSubmit: (data: RegistrationFormData) => void
}

export function RegistrationForm({ onSubmit }: RegistrationFormProps) {
  const [phoneValue, setPhoneValue] = useState('')

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    setValue,
    trigger,
  } = useForm<RegistrationFormData>({
    resolver: zodResolver(registrationSchema),
    mode: 'onChange',
  })

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatPhoneNumber(e.target.value)
    setPhoneValue(formatted)
    setValue('phone', formatted)
    trigger('phone')
  }

  const handleFormSubmit = (data: RegistrationFormData) => {
    console.log('üìù Form submit data:', data)
    // Send data as-is to API - phone formatting will be handled by backend
    onSubmit(data)
  }

  return (
    <div className="screen-container">
      <NavigationHeader 
        title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" 
        showBack={false}
      />
      
      <div className="content-container">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Loy!
          </h2>
          <p className="text-gray-600">
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
          </p>
        </div>

        <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-6">
          <div>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
              –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è *
            </label>
            <input
              {...register('name')}
              type="text"
              id="name"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"
              className={`ios-input ${errors.name ? 'error' : ''}`}
              autoComplete="name"
            />
            {errors.name && (
              <p className="error-message">{errors.name.message}</p>
            )}
          </div>

          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">
              –¢–µ–ª–µ—Ñ–æ–Ω *
            </label>
            <input
              type="tel"
              id="phone"
              value={phoneValue}
              onChange={handlePhoneChange}
              placeholder="+7 (999) 999-99-99"
              className={`ios-input ${errors.phone ? 'error' : ''}`}
              autoComplete="tel"
            />
            {errors.phone && (
              <p className="error-message">{errors.phone.message}</p>
            )}
          </div>

          <div className="pt-4">
            <button
              type="submit"
              disabled={!isValid}
              className="w-full ios-button-primary"
            >
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
          </div>
        </form>

        <div className="mt-8 text-center">
          <p className="text-xs text-gray-500">
            –ù–∞–∂–∏–º–∞—è "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{' '}
            <a href="#" className="text-ios-blue hover:underline">
              —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            </a>{' '}
            –∏{' '}
            <a href="#" className="text-ios-blue hover:underline">
              –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </a>
          </p>
        </div>
      </div>
    </div>
  )
}
